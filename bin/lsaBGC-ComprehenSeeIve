#!/usr/bin/env python

### Program: lsaBGC-ComprehenSeeIve.py
### Author: Rauf Salamzade
### Kalan Lab
### UW Madison, Department of Medical Microbiology and Immunology

# BSD 3-Clause License
#
# Copyright (c) 2024, Kalan-Lab
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its
#    contributors may be used to endorse or promote products derived from
#    this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import os
import sys
from time import sleep
import argparse
from lsaBGC import util
from lsaBGC.classes.GCF import GCF
import warnings
warnings.filterwarnings('ignore')

def create_parser():
    """ Parse arguments """
    parser = argparse.ArgumentParser(description="""
	Program: lsaBGC-ComprehenSeeIve.py
	Author: Rauf Salamzade
	Affiliation: Kalan Lab, UW Madison, Department of Medical Microbiology and Immunology

	This program will create a phylogenetic heatmap. Similar to lsaBGC-See, the phylogeny is either a user-provided 
	species tree or a GCF-specific phylogeny. In contrast to lsaBGC-See - which only showcases BGCs identified as 
	belonging to a certain GCF, lsaBGC-ComprehenSeeIve assesses the OrthoFinder homolog group by sample presence/absence
	matrix to show whether samples have homolog groups found in the focal GCF, even if they were not deemed to possess
	an instance of the GCF.
	
	This program is intended primarily for usage in lsaBGC-Easy and to be run with the original OrthoFinder matrix,
	prior to expansion with lsaBGC-AutoExpansion.
	""", formatter_class=argparse.RawTextHelpFormatter)


    parser.add_argument('-g', '--gcf_id', help='Focal GCF identifier', required=True)
    parser.add_argument('-l', '--lsabgc_detailed_listing', help='lsaBGC-Pan detailed listing with GCF and population structure information.', required=True)
    parser.add_argument('-m', '--orthomatrix', help='OrthoFinder/Panaroo ortholog by sample matrix.', required=True)
    parser.add_argument('-o', '--output_directory', help="Output directory.", required=True)
    parser.add_argument('-s', '--species_phylogeny', help="The species phylogeny in Newick format.", required=False, default=None)
    parser.add_argument('-y', '--create_gcf_phylogeny', action='store_true', help="Create phylogeny from sequences of homolog groups in GCF.", required=False, default=False)
    parser.add_argument('-f', '--only_scc', action='store_true', help="Use only single-copy-core homolog groups for constructing GCF phylogeny.", required=False, default=False)
    parser.add_argument('-c', '--threads', type=int, help="Number of threads to use for MCL step [Default is 1].", required=False, default=1)


    args = parser.parse_args()
    return args

def lsaBGC_ComprehenSeeIve():
    """
    Void function which runs primary workflow for program.
    """

    """
    PARSE REQUIRED INPUTS
    """
    myargs = create_parser()

    gcf_id = myargs.gcf_id
    orthofinder_matrix_file = os.path.abspath(myargs.orthomatrix)
    lsabgc_detailed_listing = os.path.abspath(myargs.lsabgc_detailed_listing)
    outdir = os.path.abspath(myargs.output_directory) + '/'

    ### vet input files quickly
    try:
        assert (os.path.isfile(orthofinder_matrix_file))
        assert (os.path.isfile(lsabgc_detailed_listing))
    except:
        raise RuntimeError('One or more of the input files provided, does not exist. Exiting now ...')

    if os.path.isdir(outdir):
        sys.stderr.write("Output directory exists. Overwriting in 5 seconds ...\n ")
        sleep(5)
    else:
        os.system('mkdir %s' % outdir)

    """
    PARSE OPTIONAL INPUTS
    """

    species_phylogeny = myargs.species_phylogeny
    threads = myargs.threads
    create_gcf_phylogeny = myargs.create_gcf_phylogeny
    only_scc = myargs.only_scc

    """
    START WORKFLOW
    """
    # create logging object
    log_file = outdir + 'Progress.log'
    logObject = util.createLoggerObject(log_file)
    version_string = util.parseVersionFromSetupPy()
    logObject.info('Running lsaBGC version %s' % version_string)

    # Log input arguments and update reference and query FASTA files.
    logObject.info("Saving parameters for future records.")
    parameters_file = outdir + 'Parameter_Inputs.txt'
    parameter_values = [gcf_id, lsabgc_detailed_listing, orthofinder_matrix_file, outdir, species_phylogeny, threads,
                        create_gcf_phylogeny, only_scc]
    parameter_names = ["Focal GCF ID", "Detailed BGC Information File", "Ortholog by Sample Mtrix File", "Output Directory",
                       "Species Phylogeny Newick File", "Threads",
                       "Create GCF Phylogeny?", "Use only SCC Homolog Groups for Creating GCF Phylogeny?"]
    util.logParametersToFile(parameters_file, parameter_names, parameter_values)
    logObject.info("Done saving parameters!")

    gcf_listing_file = outdir + 'GCF_Listing.txt'
    glf_handle = open(gcf_listing_file, 'w')
    with open(lsabgc_detailed_listing) as oldlf:
        for i, line in enumerate(oldlf):
            if i == 0: continue
            line = line.strip()
            sample, population, method, genome_path, bgc_id, bgc_path, bgc_type, line_gcf_id, scaffold, start, end, bgc_length, dist_to_edge = line.split('\t')
            if line_gcf_id == gcf_id:
                glf_handle.write('\t'.join([sample, bgc_path, method]) + '\n')
    glf_handle.close()

    # Create GCF object
    GCF_Object = GCF(gcf_listing_file, gcf_id=gcf_id, logObject=logObject)

    # Step 1: Process GCF listings file
    logObject.info("Processing BGC Genbanks from GCF listing file.")
    GCF_Object.readInBGCGenbanks(comprehensive_parsing=True)
    logObject.info("Successfully parsed BGC Genbanks and associated with unique IDs.")

    # Step 2: Parse OrthoFinder Homolog vs Sample Matrix and associate each homolog group with a color
    logObject.info("Starting to parse OrthoFinder homolog vs sample information.")
    gene_to_hg, hg_genes, hg_median_copy_count, hg_prop_multi_copy = util.parseOrthoFinderMatrix(orthofinder_matrix_file, GCF_Object.pan_genes)
    GCF_Object.inputHomologyInformation(gene_to_hg, hg_genes, hg_median_copy_count, hg_prop_multi_copy)
    logObject.info("Successfully parsed homolog matrix.")

    # Step 3: Create iTol and gggenes (R) tracks for visualizing BGCs of GCF across a phylogeny.
    if species_phylogeny:
        logObject.info("Create iTol tracks for viewing BGCs of GCF across phylogeny. Note, should be used to annotate edited species phylogeny or BGC SCC phylogeny as some samples could have multiple BGCs!")
        GCF_Object.visualizeComprehenSeeIveGCFViaR(orthofinder_matrix_file, species_phylogeny,
                                                   outdir + 'BGCs_Visualization.heatmap.txt',
                                                   outdir + 'BGCs_Visualization.detection_method.txt',
                                                   outdir + 'BGC_Visualization.species_phylogeny.pdf', outdir + 'plot_with_species_phylo.R')
        logObject.info("iTol track written and automatic plot via ggtree (R) rendered!")

    # Step 4: (Optional) Create phylogeny from single-copy-core homologs from BGCs across samples (single copy in samples, not BGCs)
    if create_gcf_phylogeny:
        logObject.info("User requested construction of phylogeny from SCCs in BGC! Beginning phylogeny construction.")
        logObject.info("Beginning process of creating protein alignments for each homolog group using mafft, then translating these to codon alignments using PAL2NAL.")
        GCF_Object.constructCodonAlignments(outdir, only_scc=only_scc, threads=threads)
        logObject.info("All codon alignments for SCC homologs now successfully achieved!")

        # Step 5: Create phylogeny using FastTree2 after creating concatenated BGC alignment and processing to remove
        # sites with high rates of missing data.
        logObject.info("Creating phylogeny using FastTree2 after creating concatenated BGC alignment and processing to remove sites with high rates of missing data!")
        GCF_Object.constructGCFPhylogeny(outdir + 'BGC_SCCs_Concatenated.fasta', outdir + 'BGC_SCCs_Concatenated.nwk', only_scc=only_scc)
        GCF_Object.visualizeComprehenSeeIveGCFViaR(orthofinder_matrix_file, outdir + 'BGC_SCCs_Concatenated.nwk',
                                                   outdir + 'BGCs_Visualization.heatmap.txt',
                                                   outdir + 'BGCs_Visualization.detection_method.txt',
                                                   outdir + 'BGC_Visualization.GCF_phylogeny.pdf', outdir + 'plot_with_gcf_phylo.R')

    # Write checkpoint file for lsaBGC-AutoAnalyze.py
    checkpoint_file = outdir + 'CHECKPOINT.txt'
    checkpoint_handle = open(checkpoint_file, 'w')
    checkpoint_handle.write('lsaBGC-ComprehenSeeIve completed successfully!')
    checkpoint_handle.close()

    # Close logging object and exit
    util.closeLoggerObject(logObject)
    sys.exit(0)

if __name__ == '__main__':
    lsaBGC_ComprehenSeeIve()